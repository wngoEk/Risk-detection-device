# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'type_page.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


import sys
import serial
from PyQt5 import QtCore, QtGui, QtWidgets
from data_processing import classify_sound_file  # 소리 분류 함수

class Ui_vibration(object):
    def setupUi(self, vibration):
        vibration.setObjectName("vibration")
        vibration.resize(580, 454)

        self.car_horn_pattern = None
        self.dog_bark_pattern = None
        self.fire_alarm_pattern = None

        self.check_button = QtWidgets.QPushButton(vibration)
        self.check_button.setGeometry(QtCore.QRect(460, 410, 93, 28))
        self.check_button.setObjectName("check_button")
        self.check_button.clicked.connect(self.send_patterns_to_arduino)

        self.pushButton = QtWidgets.QPushButton(vibration)
        self.pushButton.setGeometry(QtCore.QRect(70, 70, 201, 91))
        self.pushButton.setStyleSheet("border-image: url(:/ptr0/ptr0.png);")
        self.pushButton.setText("")
        self.pushButton.setObjectName("pushButton")
        self.pushButton.clicked.connect(lambda: self.set_pattern('car_horn', 0))

        self.pushButton_2 = QtWidgets.QPushButton(vibration)
        self.pushButton_2.setGeometry(QtCore.QRect(290, 70, 201, 91))
        self.pushButton_2.setStyleSheet("border-image: url(:/ptr1/ptr1.png);")
        self.pushButton_2.setText("")
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_2.clicked.connect(lambda: self.set_pattern('car_horn', 1))

        self.pushButton_6 = QtWidgets.QPushButton(vibration)
        self.pushButton_6.setGeometry(QtCore.QRect(290, 290, 201, 91))
        self.pushButton_6.setStyleSheet("border-image: url(:/ptr5/ptr5.png);")
        self.pushButton_6.setText("")
        self.pushButton_6.setObjectName("pushButton_6")
        self.pushButton_6.clicked.connect(lambda: self.set_pattern('fire_alarm', 5))

        self.pushButton_4 = QtWidgets.QPushButton(vibration)
        self.pushButton_4.setGeometry(QtCore.QRect(290, 180, 201, 91))
        self.pushButton_4.setStyleSheet("border-image: url(:/ptr3/ptr3.png);")
        self.pushButton_4.setText("")
        self.pushButton_4.setObjectName("pushButton_4")
        self.pushButton_4.clicked.connect(lambda: self.set_pattern('fire_alarm', 3))

        self.pushButton_3 = QtWidgets.QPushButton(vibration)
        self.pushButton_3.setGeometry(QtCore.QRect(70, 180, 201, 91))
        self.pushButton_3.setStyleSheet("border-image: url(:/ptr2/ptr2.png);")
        self.pushButton_3.setText("")
        self.pushButton_3.setObjectName("pushButton_3")
        self.pushButton_3.clicked.connect(lambda: self.set_pattern('dog_bark', 2))

        self.pushButton_5 = QtWidgets.QPushButton(vibration)
        self.pushButton_5.setGeometry(QtCore.QRect(70, 290, 201, 91))
        self.pushButton_5.setStyleSheet("border-image: url(:/ptr4/ptr4.png);")
        self.pushButton_5.setText("")
        self.pushButton_5.setObjectName("pushButton_5")
        self.pushButton_5.clicked.connect(lambda: self.set_pattern('dog_bark', 4))

        self.retranslateUi(vibration)
        QtCore.QMetaObject.connectSlotsByName(vibration)

    def retranslateUi(self, vibration):
        _translate = QtCore.QCoreApplication.translate
        vibration.setWindowTitle(_translate("vibration", "Form"))
        self.check_button.setText(_translate("vibration", "확인"))

    def set_pattern(self, sound_type, pattern_id):
        if sound_type == 'car_horn':
            self.car_horn_pattern = pattern_id
        elif sound_type == 'dog_bark':
            self.dog_bark_pattern = pattern_id
        elif sound_type == 'fire_alarm':
            self.fire_alarm_pattern = pattern_id

        print(f"Set {sound_type} pattern to {pattern_id}")

    def send_patterns_to_arduino(self):
        patterns = {
            'car_horn': self.car_horn_pattern,
            'dog_bark': self.dog_bark_pattern,
            'fire_alarm': self.fire_alarm_pattern
        }
        
        with serial.Serial('COM4', 9600, timeout=1) as ser:
            for sound_type, pattern_id in patterns.items():
                if pattern_id is not None:
                    message = f"{sound_type}:{pattern_id}\n"
                    ser.write(message.encode())
                    print(f"Sent to Arduino: {message}")
                    while True:
                        if ser.in_waiting > 0:
                            response = ser.readline().decode().strip()
                            print(f"Arduino response: {response}")
                            break

        # 분류할 파일 경로
        file_path = "C:\\Users\\Admin\\Desktop\\7389-1-3-5.wav" 

        # 파일을 분류하여 결과를 가져오고 아두이노로 전송하는 함수
        self.send_result_to_arduino(file_path)

    def send_result_to_arduino(self, file_path):
        # 파일을 분류하여 결과를 가져옴
        predicted_class = classify_sound_file(file_path)
        print("The predicted class is:", predicted_class)
        
        # 결과를 아두이노로 전송
        with serial.Serial('COM4', 9600, timeout=1) as ser:
            pattern_id = None
            if predicted_class == "car_horn":
                pattern_id = self.car_horn_pattern
            elif predicted_class == "dog_bark":
                pattern_id = self.dog_bark_pattern
            elif predicted_class == "fire_alarm":
                pattern_id = self.fire_alarm_pattern

            if pattern_id is not None:
                message = f"{predicted_class}:{pattern_id}\n"
                ser.write(message.encode())
                print(f"Sent to Arduino: {message}")
                while True:
                    if ser.in_waiting > 0:
                        response = ser.readline().decode().strip()
                        print(f"Arduino response: {response}")
                        break

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    vibration = QtWidgets.QWidget()
    ui = Ui_vibration()
    ui.setupUi(vibration)
    vibration.show()
    sys.exit(app.exec_())
